// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: protos/user/user.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_CreateOwner_FullMethodName       = "/user_service.UserService/CreateOwner"
	UserService_GetOwner_FullMethodName          = "/user_service.UserService/GetOwner"
	UserService_UpdateOwner_FullMethodName       = "/user_service.UserService/UpdateOwner"
	UserService_DeleteOwner_FullMethodName       = "/user_service.UserService/DeleteOwner"
	UserService_ListOwner_FullMethodName         = "/user_service.UserService/ListOwner"
	UserService_CheckFieldOwner_FullMethodName   = "/user_service.UserService/CheckFieldOwner"
	UserService_CreateWorker_FullMethodName      = "/user_service.UserService/CreateWorker"
	UserService_GetWorker_FullMethodName         = "/user_service.UserService/GetWorker"
	UserService_UpdateWorker_FullMethodName      = "/user_service.UserService/UpdateWorker"
	UserService_DeleteWorker_FullMethodName      = "/user_service.UserService/DeleteWorker"
	UserService_ListWorker_FullMethodName        = "/user_service.UserService/ListWorker"
	UserService_CheckFieldWorker_FullMethodName  = "/user_service.UserService/CheckFieldWorker"
	UserService_CreateGeolocation_FullMethodName = "/user_service.UserService/CreateGeolocation"
	UserService_GetGeolocation_FullMethodName    = "/user_service.UserService/GetGeolocation"
	UserService_UpdateGeolocation_FullMethodName = "/user_service.UserService/UpdateGeolocation"
	UserService_DeleteGeolocation_FullMethodName = "/user_service.UserService/DeleteGeolocation"
	UserService_ListGeolocation_FullMethodName   = "/user_service.UserService/ListGeolocation"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateOwner(ctx context.Context, in *Owner, opts ...grpc.CallOption) (*Owner, error)
	GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...grpc.CallOption) (*Owner, error)
	UpdateOwner(ctx context.Context, in *Owner, opts ...grpc.CallOption) (*Owner, error)
	DeleteOwner(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DeletedOwner, error)
	ListOwner(ctx context.Context, in *GetAllOwnerRequest, opts ...grpc.CallOption) (*GetAllOwnerResponse, error)
	CheckFieldOwner(ctx context.Context, in *CheckFieldRequest, opts ...grpc.CallOption) (*CheckFieldResponse, error)
	CreateWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*Worker, error)
	GetWorker(ctx context.Context, in *GetWorkerRequest, opts ...grpc.CallOption) (*Worker, error)
	UpdateWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*Worker, error)
	DeleteWorker(ctx context.Context, in *GetWorkerRequest, opts ...grpc.CallOption) (*DeletedWorker, error)
	ListWorker(ctx context.Context, in *GetAllWorkerRequest, opts ...grpc.CallOption) (*GetAllWorkerResponse, error)
	CheckFieldWorker(ctx context.Context, in *CheckFieldRequest, opts ...grpc.CallOption) (*CheckFieldResponse, error)
	CreateGeolocation(ctx context.Context, in *Geolocation, opts ...grpc.CallOption) (*Geolocation, error)
	GetGeolocation(ctx context.Context, in *GetGeolocationRequest, opts ...grpc.CallOption) (*Geolocation, error)
	UpdateGeolocation(ctx context.Context, in *Geolocation, opts ...grpc.CallOption) (*Geolocation, error)
	DeleteGeolocation(ctx context.Context, in *GetGeolocationRequest, opts ...grpc.CallOption) (*DeletedGeolocation, error)
	ListGeolocation(ctx context.Context, in *GetAllGeolocationRequest, opts ...grpc.CallOption) (*GetAllGeolocationResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateOwner(ctx context.Context, in *Owner, opts ...grpc.CallOption) (*Owner, error) {
	out := new(Owner)
	err := c.cc.Invoke(ctx, UserService_CreateOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...grpc.CallOption) (*Owner, error) {
	out := new(Owner)
	err := c.cc.Invoke(ctx, UserService_GetOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateOwner(ctx context.Context, in *Owner, opts ...grpc.CallOption) (*Owner, error) {
	out := new(Owner)
	err := c.cc.Invoke(ctx, UserService_UpdateOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteOwner(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DeletedOwner, error) {
	out := new(DeletedOwner)
	err := c.cc.Invoke(ctx, UserService_DeleteOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListOwner(ctx context.Context, in *GetAllOwnerRequest, opts ...grpc.CallOption) (*GetAllOwnerResponse, error) {
	out := new(GetAllOwnerResponse)
	err := c.cc.Invoke(ctx, UserService_ListOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckFieldOwner(ctx context.Context, in *CheckFieldRequest, opts ...grpc.CallOption) (*CheckFieldResponse, error) {
	out := new(CheckFieldResponse)
	err := c.cc.Invoke(ctx, UserService_CheckFieldOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*Worker, error) {
	out := new(Worker)
	err := c.cc.Invoke(ctx, UserService_CreateWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetWorker(ctx context.Context, in *GetWorkerRequest, opts ...grpc.CallOption) (*Worker, error) {
	out := new(Worker)
	err := c.cc.Invoke(ctx, UserService_GetWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*Worker, error) {
	out := new(Worker)
	err := c.cc.Invoke(ctx, UserService_UpdateWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteWorker(ctx context.Context, in *GetWorkerRequest, opts ...grpc.CallOption) (*DeletedWorker, error) {
	out := new(DeletedWorker)
	err := c.cc.Invoke(ctx, UserService_DeleteWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListWorker(ctx context.Context, in *GetAllWorkerRequest, opts ...grpc.CallOption) (*GetAllWorkerResponse, error) {
	out := new(GetAllWorkerResponse)
	err := c.cc.Invoke(ctx, UserService_ListWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckFieldWorker(ctx context.Context, in *CheckFieldRequest, opts ...grpc.CallOption) (*CheckFieldResponse, error) {
	out := new(CheckFieldResponse)
	err := c.cc.Invoke(ctx, UserService_CheckFieldWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateGeolocation(ctx context.Context, in *Geolocation, opts ...grpc.CallOption) (*Geolocation, error) {
	out := new(Geolocation)
	err := c.cc.Invoke(ctx, UserService_CreateGeolocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetGeolocation(ctx context.Context, in *GetGeolocationRequest, opts ...grpc.CallOption) (*Geolocation, error) {
	out := new(Geolocation)
	err := c.cc.Invoke(ctx, UserService_GetGeolocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateGeolocation(ctx context.Context, in *Geolocation, opts ...grpc.CallOption) (*Geolocation, error) {
	out := new(Geolocation)
	err := c.cc.Invoke(ctx, UserService_UpdateGeolocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteGeolocation(ctx context.Context, in *GetGeolocationRequest, opts ...grpc.CallOption) (*DeletedGeolocation, error) {
	out := new(DeletedGeolocation)
	err := c.cc.Invoke(ctx, UserService_DeleteGeolocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListGeolocation(ctx context.Context, in *GetAllGeolocationRequest, opts ...grpc.CallOption) (*GetAllGeolocationResponse, error) {
	out := new(GetAllGeolocationResponse)
	err := c.cc.Invoke(ctx, UserService_ListGeolocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CreateOwner(context.Context, *Owner) (*Owner, error)
	GetOwner(context.Context, *GetOwnerRequest) (*Owner, error)
	UpdateOwner(context.Context, *Owner) (*Owner, error)
	DeleteOwner(context.Context, *IdRequest) (*DeletedOwner, error)
	ListOwner(context.Context, *GetAllOwnerRequest) (*GetAllOwnerResponse, error)
	CheckFieldOwner(context.Context, *CheckFieldRequest) (*CheckFieldResponse, error)
	CreateWorker(context.Context, *Worker) (*Worker, error)
	GetWorker(context.Context, *GetWorkerRequest) (*Worker, error)
	UpdateWorker(context.Context, *Worker) (*Worker, error)
	DeleteWorker(context.Context, *GetWorkerRequest) (*DeletedWorker, error)
	ListWorker(context.Context, *GetAllWorkerRequest) (*GetAllWorkerResponse, error)
	CheckFieldWorker(context.Context, *CheckFieldRequest) (*CheckFieldResponse, error)
	CreateGeolocation(context.Context, *Geolocation) (*Geolocation, error)
	GetGeolocation(context.Context, *GetGeolocationRequest) (*Geolocation, error)
	UpdateGeolocation(context.Context, *Geolocation) (*Geolocation, error)
	DeleteGeolocation(context.Context, *GetGeolocationRequest) (*DeletedGeolocation, error)
	ListGeolocation(context.Context, *GetAllGeolocationRequest) (*GetAllGeolocationResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateOwner(context.Context, *Owner) (*Owner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOwner not implemented")
}
func (UnimplementedUserServiceServer) GetOwner(context.Context, *GetOwnerRequest) (*Owner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwner not implemented")
}
func (UnimplementedUserServiceServer) UpdateOwner(context.Context, *Owner) (*Owner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwner not implemented")
}
func (UnimplementedUserServiceServer) DeleteOwner(context.Context, *IdRequest) (*DeletedOwner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOwner not implemented")
}
func (UnimplementedUserServiceServer) ListOwner(context.Context, *GetAllOwnerRequest) (*GetAllOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOwner not implemented")
}
func (UnimplementedUserServiceServer) CheckFieldOwner(context.Context, *CheckFieldRequest) (*CheckFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFieldOwner not implemented")
}
func (UnimplementedUserServiceServer) CreateWorker(context.Context, *Worker) (*Worker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorker not implemented")
}
func (UnimplementedUserServiceServer) GetWorker(context.Context, *GetWorkerRequest) (*Worker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorker not implemented")
}
func (UnimplementedUserServiceServer) UpdateWorker(context.Context, *Worker) (*Worker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorker not implemented")
}
func (UnimplementedUserServiceServer) DeleteWorker(context.Context, *GetWorkerRequest) (*DeletedWorker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorker not implemented")
}
func (UnimplementedUserServiceServer) ListWorker(context.Context, *GetAllWorkerRequest) (*GetAllWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorker not implemented")
}
func (UnimplementedUserServiceServer) CheckFieldWorker(context.Context, *CheckFieldRequest) (*CheckFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFieldWorker not implemented")
}
func (UnimplementedUserServiceServer) CreateGeolocation(context.Context, *Geolocation) (*Geolocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGeolocation not implemented")
}
func (UnimplementedUserServiceServer) GetGeolocation(context.Context, *GetGeolocationRequest) (*Geolocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeolocation not implemented")
}
func (UnimplementedUserServiceServer) UpdateGeolocation(context.Context, *Geolocation) (*Geolocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGeolocation not implemented")
}
func (UnimplementedUserServiceServer) DeleteGeolocation(context.Context, *GetGeolocationRequest) (*DeletedGeolocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGeolocation not implemented")
}
func (UnimplementedUserServiceServer) ListGeolocation(context.Context, *GetAllGeolocationRequest) (*GetAllGeolocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGeolocation not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Owner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateOwner(ctx, req.(*Owner))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetOwner(ctx, req.(*GetOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Owner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateOwner(ctx, req.(*Owner))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteOwner(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListOwner(ctx, req.(*GetAllOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckFieldOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckFieldOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CheckFieldOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckFieldOwner(ctx, req.(*CheckFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetWorker(ctx, req.(*GetWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteWorker(ctx, req.(*GetWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListWorker(ctx, req.(*GetAllWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckFieldWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckFieldWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CheckFieldWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckFieldWorker(ctx, req.(*CheckFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateGeolocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Geolocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateGeolocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateGeolocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateGeolocation(ctx, req.(*Geolocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetGeolocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeolocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetGeolocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetGeolocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetGeolocation(ctx, req.(*GetGeolocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateGeolocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Geolocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateGeolocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateGeolocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateGeolocation(ctx, req.(*Geolocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteGeolocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeolocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteGeolocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteGeolocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteGeolocation(ctx, req.(*GetGeolocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListGeolocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGeolocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListGeolocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListGeolocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListGeolocation(ctx, req.(*GetAllGeolocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOwner",
			Handler:    _UserService_CreateOwner_Handler,
		},
		{
			MethodName: "GetOwner",
			Handler:    _UserService_GetOwner_Handler,
		},
		{
			MethodName: "UpdateOwner",
			Handler:    _UserService_UpdateOwner_Handler,
		},
		{
			MethodName: "DeleteOwner",
			Handler:    _UserService_DeleteOwner_Handler,
		},
		{
			MethodName: "ListOwner",
			Handler:    _UserService_ListOwner_Handler,
		},
		{
			MethodName: "CheckFieldOwner",
			Handler:    _UserService_CheckFieldOwner_Handler,
		},
		{
			MethodName: "CreateWorker",
			Handler:    _UserService_CreateWorker_Handler,
		},
		{
			MethodName: "GetWorker",
			Handler:    _UserService_GetWorker_Handler,
		},
		{
			MethodName: "UpdateWorker",
			Handler:    _UserService_UpdateWorker_Handler,
		},
		{
			MethodName: "DeleteWorker",
			Handler:    _UserService_DeleteWorker_Handler,
		},
		{
			MethodName: "ListWorker",
			Handler:    _UserService_ListWorker_Handler,
		},
		{
			MethodName: "CheckFieldWorker",
			Handler:    _UserService_CheckFieldWorker_Handler,
		},
		{
			MethodName: "CreateGeolocation",
			Handler:    _UserService_CreateGeolocation_Handler,
		},
		{
			MethodName: "GetGeolocation",
			Handler:    _UserService_GetGeolocation_Handler,
		},
		{
			MethodName: "UpdateGeolocation",
			Handler:    _UserService_UpdateGeolocation_Handler,
		},
		{
			MethodName: "DeleteGeolocation",
			Handler:    _UserService_DeleteGeolocation_Handler,
		},
		{
			MethodName: "ListGeolocation",
			Handler:    _UserService_ListGeolocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/user/user.proto",
}
