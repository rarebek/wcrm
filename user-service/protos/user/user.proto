syntax = "proto3";

option go_package = ".";

service UserService {
  rpc CreateOwner(Owner) returns (Owner);
  rpc GetOwner(GetOwnerRequest) returns (Owner);
  rpc UpdateOwner(Owner) returns (Owner);
  rpc DeleteOwner(IdRequest) returns (DeletedOwner);
  rpc ListOwner(GetAllOwnerRequest) returns (GetAllOwnerResponse);
  rpc CheckFieldOwner(CheckFieldRequest) returns (CheckFieldResponse);

  rpc CreateWorker(Worker) returns (Worker);
  rpc GetWorker(GetWorkerRequest) returns (Worker);
  rpc UpdateWorker(Worker) returns (Worker);
  rpc DeleteWorker(IdRequest) returns (DeletedWorker);
  rpc ListWorker(GetAllWorkerRequest) returns (GetAllWorkerResponse);
  rpc CheckFieldWorker(CheckFieldRequest) returns (CheckFieldResponse);

  rpc CreateGeolocation(Geolocation) returns (Geolocation);
  rpc GetGeolocation(GetGeolocationRequest) returns (Geolocation);
  rpc UpdateGeolocation(Geolocation) returns (Geolocation);
  rpc DeleteGeolocation(GetGeolocationRequest) returns (DeletedGeolocation);
  rpc ListGeolocation(GetAllGeolocationRequest) returns (GetAllGeolocationResponse);
  
}

message Owner {
  string id = 1;
  string full_name = 2;
  string company_name = 3;
  string email = 4;
  string password = 5;
  string avatar = 6;
  int64 tax = 7;
  string refresh_token = 8;
  string created_at = 9;
  string updated_at = 10;
}

message Worker {
  string id = 1;
  string full_name = 2;
  string login_key = 3;
  string password = 5;
  string owner_id = 6;
  string created_at = 7;
  string updated_at = 8;
}

message Geolocation {
  int64 id = 1;
  string latitude = 2;
  string longitude = 3;
  string owner_id = 4;
}

message GetOwnerRequest {
  map<string, string> filter=1;
}

message IdRequest {
  string id = 1;
}

message GetWorkerRequest {
  map<string, string> filter=1;
}

message GetGeolocationRequest {
  int64 id = 1;
}

message DeletedOwner {
  bool status = 1;
}

message DeletedWorker {
  bool status = 1;
}

message DeletedGeolocation {
  bool status = 1;
}

message GetAllOwnerRequest {
  int64 page = 1;
  int64 limit = 2;
}

message GetAllWorkerRequest {
  int64 page = 1;
  int64 limit = 2;
  map<string, string> filter=3;
}

message GetAllGeolocationRequest {
  string owner_id = 1;
  int64 page = 2;
  int64 limit = 3;
}

message GetAllOwnerResponse{
  repeated Owner owners = 1;
  int64 count = 2; 
}


message GetAllWorkerResponse {
  repeated Worker all_workers = 1;
  int64 count = 2; 
}

message GetAllGeolocationResponse {
  repeated Geolocation all_geolocations = 1;
  int64 count = 2; 
}

message CheckFieldRequest {
  string field = 1;
  string value = 2;
}

message CheckFieldResponse {
  bool exist = 1;
}


